plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.gorylenko.gradle-git-properties' version '2.4.2'
}

springBoot {
    buildInfo()
}

bootJar {
    enabled = true
    launchScript()
}

jar {
    enabled false
}

group = 'ru.yandex.practicum.front'
version = '1.0.0-SNAPSHOT'

ext["springCloudVersion"] = "2025.0.0"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    testCompileOnly {
        extendsFrom testAnnotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    implementation 'org.springframework.cloud:spring-cloud-starter-consul-discovery'
    implementation 'org.postgresql:postgresql'

    implementation 'org.apache.commons:commons-lang3:3.19.0'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${property("springCloudVersion")}")
    }
}

tasks.named('test') {
    failFast = true
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    testLogging {
        events = ['FAILED', 'PASSED', 'SKIPPED']
    }
}

checkstyle {
    configDirectory.set(file("$rootProject.projectDir/checkstyle"))
}

jacoco {
    toolVersion = '0.8.12'
}

def jacocoExclusions = [
        'ru.yandex.practicum.front.client.*',
        'ru.yandex.practicum.front.security.*',
        'ru.yandex.practicum.front.controller.TransferController',
        'ru.yandex.practicum.front.controller.CashController'
]

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = jacocoExclusions.stream().map { it.replace('/', '.') }.collect()
            limit {
                counter = 'INSTRUCTION'
                minimum = 0.3
            }
            limit {
                counter = 'METHOD'
                minimum = 0.3
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.3
            }
        }
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclusions)
        }))
    }
}

check.dependsOn jacocoTestCoverageVerification